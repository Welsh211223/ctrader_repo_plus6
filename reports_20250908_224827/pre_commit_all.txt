
===== pre_commit_all =====
.\.venv\Scripts\pre-commit.exe run --all-files --show-diff-on-failure

black....................................................................Failed
- hook id: black
- exit code: 123
- files were modified by this hook

error: cannot format src\ctrader\cli\trade.py: Cannot parse: 118:0: try:
reformatted src\ctrader\data_providers\coinspot.py
reformatted src\ctrader\strategies\momentum.py
reformatted src\ctrader\strategies\inverse_vol.py
reformatted src\ctrader\strategies\trend_filter.py
reformatted src\ctrader\data_providers\marketdata.py
reformatted src\ctrader\backtest.py
reformatted src\ctrader\data_providers\coinspot_v2.py

Oh no! \U0001f4a5 \U0001f494 \U0001f4a5
7 files reformatted, 21 files left unchanged, 1 file failed to reformat.

isort....................................................................Failed
- hook id: isort
- files were modified by this hook

Fixing C:\Users\User\Downloads\ctrader_repo_plus6\src\ctrader\backtest.py
Fixing C:\Users\User\Downloads\ctrader_repo_plus6\src\ctrader\data_providers\coinspot.py
Fixing C:\Users\User\Downloads\ctrader_repo_plus6\src\ctrader\data_providers\coinspot_v2.py
Fixing C:\Users\User\Downloads\ctrader_repo_plus6\src\ctrader\data_providers\marketdata.py
Fixing C:\Users\User\Downloads\ctrader_repo_plus6\src\ctrader\strategies\inverse_vol.py
Fixing C:\Users\User\Downloads\ctrader_repo_plus6\src\ctrader\strategies\momentum.py
Fixing C:\Users\User\Downloads\ctrader_repo_plus6\src\ctrader\strategies\trend_filter.py

flake8...................................................................Failed
- hook id: flake8
- exit code: 1

src/ctrader/app.py:59:38: E231 missing whitespace after ','
src/ctrader/app.py:59:76: E231 missing whitespace after ','
src/ctrader/cli/trade.py:118:1: E999 IndentationError: expected an indented block after function definition on line 117
src/ctrader/execution/coinspot_execution.py:5:1: F401 'typing.Any' imported but unused

Detect secrets...........................................................Passed
pre-commit hook(s) made changes.
If you are seeing this message in CI, reproduce locally with: `pre-commit run --all-files`.
To run `pre-commit` as part of git workflow, use `pre-commit install`.
All changes made by hooks:
cmd : warning: in the working copy of 'config/pools.yaml', LF will be replaced by CRLF the next time Git touches it
At line:4 char:3
+   cmd /c $cmd 2>&1 | Out-File "$reports\$name.txt" -Append -Encoding  ...
+   ~~~~~~~~~~~~~~~~
    + CategoryInfo          : NotSpecified: (warning: in the... Git touches it:String) [], RemoteException
    + FullyQualifiedErrorId : NativeCommandError
 
warning: in the working copy of 'src/ctrader/cli/trade.py', LF will be replaced by CRLF the next time Git touches it
diff --git a/config/pools.yaml b/config/pools.yaml
index e59fd59..35ca990 100644
--- a/config/pools.yaml
+++ b/config/pools.yaml
@@ -1,2 +1,54 @@
-global:
-  execution_broker: none
+´╗┐global:
+  quote_currency: AUD
+  fee_bps: 10            # 0.10%
+  slippage_bps: 5        # 0.05%
+  webhook_url: ""        # optional (Discord)
+
+execution:
+  min_order_value_default: 5.0
+  qty_precision:
+    BTC: 6
+    ETH: 6
+    SOL: 6
+    AVAX: 6
+    HBAR: 6
+    QNT: 6
+    DOGE: 0
+    SHIB: 0
+    XRP: 2
+  turnover_cap_pct: 15.0            # default cap used if you don't pass --turnover-cap-pct
+  turnover_cap_mode: gross          # gross | net
+
+pools:
+  conservative:
+    assets:
+      BTC: 0.40
+      ETH: 0.25
+      SOL: 0.10
+      XRP: 0.10
+      DOGE: 0.05
+      AVAX: 0.05
+      HBAR: 0.03
+      QNT: 0.02
+    categories: {}                   # optional; leave empty or map categories to a list of tickers
+    drift_threshold_pct: 2.0         # optional override per pool
+    cash_buffer_pct: 0.0
+
+  aggressive:
+    assets:
+      BTC: 0.25
+      ETH: 0.20
+      SOL: 0.20
+      AVAX: 0.15
+      DOGE: 0.10
+      SHIB: 0.05
+      XRP: 0.05
+    categories: {}
+    drift_threshold_pct: 2.0
+    cash_buffer_pct: 0.0
+
+risk_off:
+  absolute_momentum:
+    enabled: true
+    ref_symbol: BTC
+    sma_days: 200
diff --git a/src/ctrader/cli/trade.py b/src/ctrader/cli/trade.py
index ae281ec..cc9114e 100644
--- a/src/ctrader/cli/trade.py
+++ b/src/ctrader/cli/trade.py
@@ -14,6 +14,7 @@ ctrader.cli.trade
   * signals/plan/summary logs + JSONL run log
   * Discord/Slack optional notifications
 """
+
 # --- path shim so 'import ctrader' works if run by absolute script path ---
 import sys
 from pathlib import Path
@@ -24,14 +25,17 @@ if str(SRC_DIR) not in sys.path:
 # --------------------------------------------------------------------------
 
 import argparse
-import csv
 import json
 import os
+from dataclasses import dataclass
 from datetime import datetime, timedelta, timezone
+from typing import Iterable
 
 import pandas as pd
 from dotenv import load_dotenv
 
+DATA_DIR = Path(__file__).resolve().parents[3] / "data"
+DATA_DIR.mkdir(parents=True, exist_ok=True)
 from ctrader.analytics import append_trades, update_equity_and_pnl
 from ctrader.config_loader import load_pools_config
 from ctrader.data_providers.coinspot import (fetch_buy_price,
@@ -102,57 +106,27 @@ def _read_eq_stats(pool: str) -> dict:
         return {"max_drawdown": 0.0, "vol_daily": 0.0}
 
 
-def _adaptive_cap_pct(base_pct: float, pool: str, risk_off: bool) -> tuple[float, list[str]]:
-    """
-    Adaptive rules:
-      - if risk_off -> cap = min(base, 10%)   (reason: risk_off)
-      - if vol > 3% OR max_drawdown < -10% -> reduce by 40% (floor 5%) (reasons: high_vol, deep_dd)
-      - if vol < 1% AND max_drawdown > -3% -> increase by 25% (cap 60%) (reason: calm)
-    Returns (cap_pct, reasons[])
-    """
-    pct = float(base_pct)
-    reasons: list[str] = []
-    stats = _read_eq_stats(pool)
-    vol = float(stats.get("vol_daily", 0.0))
-    mdd = float(stats.get("max_drawdown", 0.0))  # negative in drawdown
-
-    if risk_off:
-        reasons.append("risk_off")
-        pct = min(pct, 10.0)
-    else:
-        high_vol = vol > 0.03     # >3% daily vol
-        deep_dd = mdd < -0.10     # deeper than -10%
-        calm = (vol < 0.01) and (mdd > -0.03)
-
-        if high_vol or deep_dd:
-            if high_vol: reasons.append("high_vol")
-            if deep_dd: reasons.append("deep_dd")
-            pct = max(5.0, pct * 0.60)
-        elif calm:
-            reasons.append("calm")
-            pct = min(60.0, pct * 1.25)
-
-    return float(pct), reasons
-
-
 class RunLock:
     """
     Simple file lock to prevent overlapping runs.
     """
+
     def __init__(self, lock_path: Path):
         self.lock_path = lock_path
 
     def acquire(self) -> bool:
-        try:
+try:
             self.lock_path.parent.mkdir(parents=True, exist_ok=True)
             with open(self.lock_path, "x", encoding="utf-8") as f:
-                f.write(f"pid={os.getpid()} ts={datetime.now(timezone.utc).isoformat()}\n")
+                f.write(
+                    f"pid={os.getpid()} ts={datetime.now(timezone.utc).isoformat()}\n"
+                )
             return True
         except FileExistsError:
             return False
 
     def release(self) -> None:
-        try:
+try:
             if self.lock_path.exists():
                 self.lock_path.unlink()
         except Exception:
@@ -168,12 +142,12 @@ def _load_last_trade_times(pool: str) -> dict[str, datetime]:
     out: dict[str, datetime] = {}
     if not fp.exists():
         return out
-    try:
+try:
         df = pd.read_csv(fp)
         if "ts" not in df or "ticker" not in df:
             return out
         for _, row in df[["ticker", "ts"]].dropna().iterrows():
-            try:
+try:
                 dt = datetime.fromisoformat(str(row["ts"]).replace("Z", "+00:00"))
             except Exception:
                 continue
@@ -206,14 +180,21 @@ def _coingecko_simple_price(symbols: list[str], vs: str) -> dict[str, float]:
     Returns mapping TICKER -> price_in_vs (float), skips unknowns.
     Planning-only safety: never used to place live orders.
     """
-    import requests  # local import so requests isn't strictly required if fallback isn't used
+y:
+        import requests  # local import so requests isn't strictly required if fallback isn't used
+    except Exception:
+        return {}
+
     ids_map = _coingecko_ids()
     ids = [ids_map[s] for s in symbols if s in ids_map]
     if not ids:
         return {}
+
     url = "https://api.coingecko.com/api/v3/simple/price"
-    try:
-        r = requests.get(url, params={"ids": ",".join(ids), "vs_currencies": vs.lower()}, timeout=6)
+try:
+        r = requests.get(
+            url, params={"ids": ",".join(ids), "vs_currencies": vs.lower()}, timeout=6
+        )
         r.raise_for_status()
         data = r.json() or {}
         out: dict[str, float] = {}
@@ -229,38 +210,23 @@ def _coingecko_simple_price(symbols: list[str], vs: str) -> dict[str, float]:
         return {}
 
 
-def _validate_pool_config(cfg: dict, pool: str) -> list[str]:
-    """
-    Basic sanity checks: returns list of warnings/errors (strings). Non-empty means something to fix.
-    """
-    issues: list[str] = []
-    try:
-        pcfg = cfg["pools"][pool]
-        assets = pcfg.get("assets", {})
-        if not isinstance(assets, dict) or not assets:
-            issues.append("assets missing/empty")
-        else:
-            for k, v in assets.items():
-                if not isinstance(v, (int, float)) or v < 0:
-                    issues.append(f"asset weight invalid: {k} -> {v}")
-        cat = pcfg.get("categories", {})
-        akeys = set(assets.keys())
-        ckeys = set()
-        for _, toks in (cat or {}).items():
-            ckeys.update([str(t).upper() for t in (toks or [])])
-        unknown = ckeys - set([k.upper() for k in akeys])
-        if unknown:
-            issues.append(f"categories reference unknown assets: {sorted(list(unknown))}")
-    except Exception as e:
-        issues.append(f"config parse error: {e}")
-    return issues
+# --------------------------- main ---------------------------
 
 
-# --------------------------- main ---------------------------
+@dataclass
+class GuardPreview:
+    used_coinspot_quote: bool
+    threshold: float | None
+    direction: str | None
+    violated: bool
+
 
-def main():
+def main() -> None:
     ap = argparse.ArgumentParser()
-    ap.add_argument("--config", default=str(Path(__file__).resolve().parents[3] / "config" / "pools.yaml"))
+    ap.add_argument(
+        "--config",
+        default=str(Path(__file__).resolve().parents[3] / "config" / "pools.yaml"),
+    )
     ap.add_argument("--pool", choices=["conservative", "aggressive"], required=True)
 
     # modes & safety
@@ -273,29 +239,83 @@ def main():
     # coinspot guard / thresholds
     ap.add_argument("--coinspot-use-quote", action="store_true")
     ap.add_argument("--coinspot-threshold", type=float, default=None)
-    ap.add_argument("--coinspot-direction", type=str, default=None, choices=["UP", "DOWN", "BOTH"])
+    ap.add_argument(
+        "--coinspot-direction", type=str, default=None, choices=["UP", "DOWN", "BOTH"]
+    )
     ap.add_argument("--guard", type=float, default=None)  # alias for threshold
 
     # sizing & constraints
     ap.add_argument("--min-cash-reserve-pct", type=float, default=0.0)
     ap.add_argument("--min-order-value", type=float, default=5.0)
-    ap.add_argument("--qty-precision", type=str, default="BTC:6,ETH:6,SOL:6,AVAX:6,HBAR:6,QNT:6,DOGE:0,SHIB:0,XRP:2")
+    ap.add_argument(
+        "--qty-precision",
+        type=str,
+        default="BTC:6,ETH:6,SOL:6,AVAX:6,HBAR:6,QNT:6,DOGE:0,SHIB:0,XRP:2",
+    )
 
     # turnover cap controls
-    ap.add_argument("--turnover-cap-pct", type=float, default=None, help="Override execution.turnover_cap_pct for this run (percent of equity).")
-    ap.add_argument("--turnover-cap-mode", choices=["gross", "net"], default="gross", help="gross = sum notionals; net = buys - sells (more permissive).")
-    ap.add_argument("--turnover-priority", choices=["sell_first", "largest_first", "drift_first"], default="sell_first", help="Which trades to include first under the cap.")
-    ap.add_argument("--turnover-adaptive", action="store_true", help="Adapt cap using vol/drawdown & risk-off; notifies Discord with reasons when --notify.")
+    ap.add_argument(
+        "--turnover-cap-pct",
+        type=float,
+        default=None,
+        help="Override execution.turnover_cap_pct for this run (percent of equity).",
+    )
+    ap.add_argument(
+        "--turnover-cap-mode",
+        choices=["gross", "net"],
+        default="gross",
+        help="gross = sum notionals; net = buys - sells (more permissive).",
+    )
+    ap.add_argument(
+        "--turnover-priority",
+        choices=["sell_first", "largest_first", "drift_first"],
+        default="sell_first",
+        help="Which trades to include first under the cap.",
+    )
+    ap.add_argument(
+        "--turnover-adaptive",
+        action="store_true",
+        help="Adapt cap using vol/drawdown & risk-off; notifies Discord with reasons when --notify.",
+    )
 
     # circuit breakers & cooldown
-    ap.add_argument("--max-trades-hard", type=int, default=50, help="Abort if plan has more than this many trades after capping.")
-    ap.add_argument("--max-notional-pct-hard", type=float, default=80.0, help="Abort if gross notional exceeds this % of equity (post cap).")
-    ap.add_argument("--missing-price-pct-hard", type=float, default=50.0, help="Abort if more than this % of assets have missing/zero prices.")
-    ap.add_argument("--cooldown-minutes", type=int, default=0, help="Skip re-trading same ticker within this many minutes unless bypassed by drift.")
-    ap.add_argument("--cooldown-bypass-drift-pct", type=float, default=3.0, help="If absolute position drift exceeds this %, bypass cooldown for that ticker.")
+    ap.add_argument(
+        "--max-trades-hard",
+        type=int,
+        default=50,
+        help="Abort if plan has more than this many trades after capping.",
+    )
+    ap.add_argument(
+        "--max-notional-pct-hard",
+        type=float,
+        default=80.0,
+        help="Abort if gross notional exceeds this % of equity (post cap).",
+    )
+    ap.add_argument(
+        "--missing-price-pct-hard",
+        type=float,
+        default=50.0,
+        help="Abort if more than this % of assets have missing/zero prices.",
+    )
+    ap.add_argument(
+        "--cooldown-minutes",
+        type=int,
+        default=0,
+        help="Skip re-trading same ticker within this many minutes unless bypassed by drift.",
+    )
+    ap.add_argument(
+        "--cooldown-bypass-drift-pct",
+        type=float,
+        default=3.0,
+        help="If absolute position drift exceeds this %, bypass cooldown for that ticker.",
+    )
 
     # price fallback
-    ap.add_argument("--fallback-coingecko", action="store_true", help="Use CoinGecko simple price as final fallback for missing/zero prices (planning only).")
+    ap.add_argument(
+        "--fallback-coingecko",
+        action="store_true",
+        help="Use CoinGecko simple price as final fallback for missing/zero prices (planning only).",
+    )
 
     # polling (live)
     ap.add_argument("--order-timeout-sec", type=int, default=30)
@@ -305,6 +325,11 @@ def main():
     ap.add_argument("--offline", action="store_true")
     ap.add_argument("--cache-ttl", type=int, default=None)
 
+    # dry-run print verbosity
+    ap.add_argument(
+        "--dry-run", action="store_true", help="(alias of --paper + verbose preview)"
+    )
+
     args = ap.parse_args()
 
     # env
@@ -314,8 +339,17 @@ def main():
     if args.cache_ttl is not None:
         os.environ["CACHE_TTL_SEC"] = str(args.cache_ttl)
 
+    # treat --dry-run as paper
+    if args.dry_run:
+        args.paper = True
+
     # run-lock (prevents overlapping runs)
-    lock_file = Path(__file__).resolve().parents[3] / "data" / "locks" / f".run_{args.pool}.lock"
+    lock_file = (
+        Path(__file__).resolve().parents[3]
+        / "data"
+        / "locks"
+        / f".run_{args.pool}.lock"
+    )
     run_lock = RunLock(lock_file)
     if not run_lock.acquire():
         print(f"Another run appears to be in progress (lock: {lock_file}). Exiting.")
@@ -324,23 +358,25 @@ def main():
     # Optional Slack webhook (if present)
     SLACK_WEBHOOK = os.getenv("SLACK_WEBHOOK", "").strip()
 
-    def _slack(text: str, fields: dict | None = None):
-        if not args.notify:
-            return
-        if not SLACK_WEBHOOK:
+    def _slack(text: str, fields: dict | None = None) -> None:
+        if not args.notify or not SLACK_WEBHOOK:
             return
-        try:
+y:
             import requests
+
             blocks = [{"type": "section", "text": {"type": "mrkdwn", "text": text}}]
             if fields:
-                items = "\n".join([f"*{k}*: `{v}`" for k, v in fields.items()])
-                blocks.append({"type": "section", "text": {"type": "mrkdwn", "text": items}})
+                items = "\n".join([f"*{k}*: {v}" for k, v in fields.items()])
+                blocks.append(
+                    {"type": "section", "text": {"type": "mrkdwn", "text": items}}
+                )
             requests.post(SLACK_WEBHOOK, json={"blocks": blocks}, timeout=5)
         except Exception:
+            # best effort: never hard-fail trading because Slack is down
             pass
 
-    try:
-        # config
+try:
+        # ---------------- config & execution defaults ----------------
         cfg = load_pools_config(args.config)
         issues = _validate_pool_config(cfg, args.pool)
         if issues:
@@ -349,7 +385,9 @@ def main():
             if args.notify:
                 # prefer .env webhook if YAML is blank
                 gtmp = cfg.get("global", {})
-                webhook_tmp = (gtmp.get("webhook_url", "") or os.getenv("DISCORD_WEBHOOK", "")).strip()
+                webhook_tmp = (
+                    gtmp.get("webhook_url", "") or os.getenv("DISCORD_WEBHOOK", "")
+                ).strip()
                 if webhook_tmp:
                     post_discord_embed(webhook_tmp, "Config issues", msg)
                 _slack("Config issues", {"issues": msg})
@@ -359,16 +397,21 @@ def main():
         quote = g.get("quote_currency", "AUD").upper()
         fee_bps = float(g.get("fee_bps", 10))
         slip_bps = float(g.get("slippage_bps", 5))
-webhook = (g.get("webhook_url", "") or os.getenv("DISCORD_WEBHOOK", "")).strip()
+        webhook = (g.get("webhook_url", "") or os.getenv("DISCORD_WEBHOOK", "")).strip()
 
         # --- config-driven execution defaults with CLI override ---
         exec_cfg = cfg.get("execution", {})
-        cfg_min_order_value = float(exec_cfg.get("min_order_value_default", args.min_order_value))
+        cfg_min_order_value = float(
+            exec_cfg.get("min_order_value_default", args.min_order_value)
+        )
         if args.min_order_value == 5.0 and "min_order_value_default" in exec_cfg:
             args.min_order_value = cfg_min_order_value
 
         cfg_qprec = exec_cfg.get("qty_precision", {}) or {}
-        if cfg_qprec and (args.qty_precision == "BTC:6,ETH:6,SOL:6,AVAX:6,HBAR:6,QNT:6,DOGE:0,SHIB:0,XRP:2"):
+        if cfg_qprec and (
+            args.qty_precision
+            == "BTC:6,ETH:6,SOL:6,AVAX:6,HBAR:6,QNT:6,DOGE:0,SHIB:0,XRP:2"
+        ):
             args.qty_precision = ",".join([f"{k}:{v}" for k, v in cfg_qprec.items()])
         # -----------------------------------------------------------
 
@@ -378,5 +421,325 @@ webhook = (g.get("webhook_url", "") or os.getenv("DISCORD_WEBHOOK", "")).strip()
             if not part.strip():
                 continue
             sym, _, dec = part.partition(":")
-            try:
+try:
+                qmap[sym.upper()] = max(0, int(dec))
+            except Exception:
+                continue
+
+        # -------- holdings & prices --------
+        holdings = load_holdings(args.pool, DATA_DIR)
+        symbols = sorted({*holdings.keys(), *pcfg.get("assets", {}).keys()})
+        prices = fetch_prices_coinspot(symbols)
+
+        # optional fallback (planning only)
+        if args.fallback_coingecko:
+            missing = [s for s in symbols if float(prices.get(s, 0.0) or 0.0) <= 0.0]
+            if missing:
+                cg = _coingecko_simple_price(missing, vs=quote)
+                for k, v in cg.items():
+                    prices.setdefault(k, float(v))
+
+        # compute targets (weights may come from strategies)
+        weights = pcfg.get("assets", {})
+
+        # example optional strategy transformers (safe-guarded)
+        strat = (pcfg.get("strategy") or {}).get("name", "").lower()
+        if strat == "inverse_vol":
+try:
+                lookback = int((pcfg.get("strategy") or {}).get("lookback_days", 90))
+                weights = inverse_vol_weights(symbols, lookback=lookback)
+            except Exception:
+                pass
+        elif strat == "momentum":
+try:
+                k = int((pcfg.get("strategy") or {}).get("top_k", 3))
+                mom = momentum_12_1(symbols, vs=quote.lower())
+                weights = boost_top_k(mom, top_k=k)
+            except Exception:
+                pass
+
+        # trend filter (e.g., turn off assets failing long-term trend)
+try:
+            weights = apply_trend_filter(weights)
+        except Exception:
+            pass
+
+        equity = float(
+            sum(
+                (holdings.get(s, 0.0) or 0.0) * (prices.get(s, 0.0) or 0.0)
+                for s in symbols
+            )
+        )
+        cash_reserve_pct = max(0.0, float(args.min_cash_reserve_pct))
+
+        # risk-off overlay (extra buffer)
+        risk_off = _risk_off_trigger(cfg, quote)
+        if risk_off:
+            cash_reserve_pct = max(
+                cash_reserve_pct, float(g.get("risk_off", {}).get("min_cash_pct", 10.0))
+            )
+
+        targets = compute_targets(
+            holdings=holdings,
+            prices=prices,
+            weights=weights,
+            equity=equity,
+            min_cash_reserve_pct=cash_reserve_pct,
+        )
+
+        # construct raw rebalance plan
+        drift = compute_drift(holdings, prices, weights, equity)
+        if not any_drift_exceeds_threshold(
+            drift, threshold=pcfg.get("drift_threshold_pct", 1.0)
+        ):
+            print("No material drift ├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├óÔé¼┬á├â┬ó├óÔÇÜ┬¼├óÔÇ×┬ó├âãÆ├åÔÇÖ├â┬ó├óÔÇÜ┬¼ ├âãÆ├é┬ó├â┬ó├óÔé¼┼í├é┬¼├â┬ó├óÔé¼┼¥├é┬ó├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├é┬ó├â┬ó├óÔé¼┼í├é┬¼├âÔÇÜ ├âãÆ├åÔÇÖ├âÔÇÜ├é┬ó├âãÆ├é┬ó├â┬ó├óÔÇÜ┬¼├à┬í├âÔÇÜ├é┬¼├âãÆ├é┬ó├â┬ó├óÔÇÜ┬¼├à┬¥├âÔÇÜ├é┬ó├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├óÔé¼┬á├â┬ó├óÔÇÜ┬¼├óÔÇ×┬ó├âãÆ├åÔÇÖ├âÔÇÜ├é┬ó├âãÆ├é┬ó├â┬ó├óÔÇÜ┬¼├à┬í├âÔÇÜ├é┬¼├âãÆ├óÔé¼┼í├âÔÇÜ ├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├óÔé¼┼í├âÔÇÜ├é┬ó├âãÆ├åÔÇÖ├âÔÇÜ├é┬ó├âãÆ├é┬ó├â┬ó├óÔé¼┼í├é┬¼├âÔÇª├é┬í├âãÆ├óÔé¼┼í├âÔÇÜ├é┬¼├âãÆ├åÔÇÖ├âÔÇÜ├é┬ó├âãÆ├é┬ó├â┬ó├óÔé¼┼í├é┬¼├âÔÇª├é┬¥├âãÆ├óÔé¼┼í├âÔÇÜ├é┬ó├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├óÔé¼┬á├â┬ó├óÔÇÜ┬¼├óÔÇ×┬ó├âãÆ├åÔÇÖ├â┬ó├óÔÇÜ┬¼ ├âãÆ├é┬ó├â┬ó├óÔé¼┼í├é┬¼├â┬ó├óÔé¼┼¥├é┬ó├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├óÔé¼┼í├âÔÇÜ├é┬ó├âãÆ├åÔÇÖ├âÔÇÜ├é┬ó├âãÆ├é┬ó├â┬ó├óÔé¼┼í├é┬¼├âÔÇª├é┬í├âãÆ├óÔé¼┼í├âÔÇÜ├é┬¼├âãÆ├åÔÇÖ├â┬ó├óÔÇÜ┬¼├à┬í├âãÆ├óÔé¼┼í├âÔÇÜ ├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├óÔé¼┬á├â┬ó├óÔÇÜ┬¼├óÔÇ×┬ó├âãÆ├åÔÇÖ├â┬ó├óÔÇÜ┬¼├à┬í├âãÆ├óÔé¼┼í├âÔÇÜ├é┬ó├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├óÔé¼┼í├âÔÇÜ├é┬ó├âãÆ├åÔÇÖ├âÔÇÜ├é┬ó├âãÆ├é┬ó├â┬ó├óÔÇÜ┬¼├à┬í├âÔÇÜ├é┬¼├âãÆ├óÔé¼┬ª├âÔÇÜ├é┬í├âãÆ├åÔÇÖ├â┬ó├óÔÇÜ┬¼├à┬í├âãÆ├óÔé¼┼í├âÔÇÜ├é┬¼├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├óÔé¼┼í├âÔÇÜ├é┬ó├âãÆ├åÔÇÖ├âÔÇÜ├é┬ó├âãÆ├é┬ó├â┬ó├óÔÇÜ┬¼├à┬í├âÔÇÜ├é┬¼├âãÆ├óÔé¼┬ª├âÔÇÜ├é┬¥├âãÆ├åÔÇÖ├â┬ó├óÔÇÜ┬¼├à┬í├âãÆ├óÔé¼┼í├âÔÇÜ├é┬ó├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├óÔé¼┬á├â┬ó├óÔÇÜ┬¼├óÔÇ×┬ó├âãÆ├åÔÇÖ├â┬ó├óÔÇÜ┬¼ ├âãÆ├é┬ó├â┬ó├óÔé¼┼í├é┬¼├â┬ó├óÔé¼┼¥├é┬ó├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├é┬ó├â┬ó├óÔé¼┼í├é┬¼├âÔÇÜ ├âãÆ├åÔÇÖ├âÔÇÜ├é┬ó├âãÆ├é┬ó├â┬ó├óÔÇÜ┬¼├à┬í├âÔÇÜ├é┬¼├âãÆ├é┬ó├â┬ó├óÔÇÜ┬¼├à┬¥├âÔÇÜ├é┬ó├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├óÔé¼┬á├â┬ó├óÔÇÜ┬¼├óÔÇ×┬ó├âãÆ├åÔÇÖ├â┬ó├óÔÇÜ┬¼├à┬í├âãÆ├óÔé¼┼í├âÔÇÜ├é┬ó├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├óÔé¼┼í├âÔÇÜ├é┬ó├âãÆ├åÔÇÖ├âÔÇÜ├é┬ó├âãÆ├é┬ó├â┬ó├óÔÇÜ┬¼├à┬í├âÔÇÜ├é┬¼├âãÆ├óÔé¼┬ª├âÔÇÜ├é┬í├âãÆ├åÔÇÖ├â┬ó├óÔÇÜ┬¼├à┬í├âãÆ├óÔé¼┼í├âÔÇÜ├é┬¼├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├é┬ó├â┬ó├óÔé¼┼í├é┬¼├âÔÇª├é┬í├âãÆ├åÔÇÖ├â┬ó├óÔÇÜ┬¼├à┬í├âãÆ├óÔé¼┼í├âÔÇÜ ├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├óÔé¼┬á├â┬ó├óÔÇÜ┬¼├óÔÇ×┬ó├âãÆ├åÔÇÖ├â┬ó├óÔÇÜ┬¼ ├âãÆ├é┬ó├â┬ó├óÔé¼┼í├é┬¼├â┬ó├óÔé¼┼¥├é┬ó├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├é┬ó├â┬ó├óÔé¼┼í├é┬¼├âÔÇª├é┬í├âãÆ├åÔÇÖ├â┬ó├óÔÇÜ┬¼├à┬í├âãÆ├óÔé¼┼í├âÔÇÜ├é┬ó├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├óÔé¼┬á├â┬ó├óÔÇÜ┬¼├óÔÇ×┬ó├âãÆ├åÔÇÖ├â┬ó├óÔÇÜ┬¼├à┬í├âãÆ├óÔé¼┼í├âÔÇÜ├é┬ó├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├óÔé¼┼í├âÔÇÜ├é┬ó├âãÆ├åÔÇÖ├âÔÇÜ├é┬ó├âãÆ├é┬ó├â┬ó├óÔé¼┼í├é┬¼├âÔÇª├é┬í├âãÆ├óÔé¼┼í├âÔÇÜ├é┬¼├âãÆ├åÔÇÖ├â┬ó├óÔÇÜ┬¼├é┬ª├âãÆ├óÔé¼┼í├âÔÇÜ├é┬í├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├é┬ó├â┬ó├óÔé¼┼í├é┬¼├âÔÇª├é┬í├âãÆ├åÔÇÖ├â┬ó├óÔÇÜ┬¼├à┬í├âãÆ├óÔé¼┼í├âÔÇÜ├é┬¼├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├óÔé¼┬á├â┬ó├óÔÇÜ┬¼├óÔÇ×┬ó├âãÆ├åÔÇÖ├â┬ó├óÔÇÜ┬¼├à┬í├âãÆ├óÔé¼┼í├âÔÇÜ├é┬ó├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├óÔé¼┼í├âÔÇÜ├é┬ó├âãÆ├åÔÇÖ├âÔÇÜ├é┬ó├âãÆ├é┬ó├â┬ó├óÔé¼┼í├é┬¼├âÔÇª├é┬í├âãÆ├óÔé¼┼í├âÔÇÜ├é┬¼├âãÆ├åÔÇÖ├â┬ó├óÔÇÜ┬¼├é┬ª├âãÆ├óÔé¼┼í├âÔÇÜ├é┬¥├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├é┬ó├â┬ó├óÔé¼┼í├é┬¼├âÔÇª├é┬í├âãÆ├åÔÇÖ├â┬ó├óÔÇÜ┬¼├à┬í├âãÆ├óÔé¼┼í├âÔÇÜ├é┬ó├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├óÔé¼┬á├â┬ó├óÔÇÜ┬¼├óÔÇ×┬ó├âãÆ├åÔÇÖ├â┬ó├óÔÇÜ┬¼ ├âãÆ├é┬ó├â┬ó├óÔé¼┼í├é┬¼├â┬ó├óÔé¼┼¥├é┬ó├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├é┬ó├â┬ó├óÔé¼┼í├é┬¼├âÔÇÜ ├âãÆ├åÔÇÖ├âÔÇÜ├é┬ó├âãÆ├é┬ó├â┬ó├óÔÇÜ┬¼├à┬í├âÔÇÜ├é┬¼├âãÆ├é┬ó├â┬ó├óÔÇÜ┬¼├à┬¥├âÔÇÜ├é┬ó├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├óÔé¼┬á├â┬ó├óÔÇÜ┬¼├óÔÇ×┬ó├âãÆ├åÔÇÖ├âÔÇÜ├é┬ó├âãÆ├é┬ó├â┬ó├óÔÇÜ┬¼├à┬í├âÔÇÜ├é┬¼├âãÆ├óÔé¼┼í├âÔÇÜ ├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├óÔé¼┼í├âÔÇÜ├é┬ó├âãÆ├åÔÇÖ├âÔÇÜ├é┬ó├âãÆ├é┬ó├â┬ó├óÔé¼┼í├é┬¼├âÔÇª├é┬í├âãÆ├óÔé¼┼í├âÔÇÜ├é┬¼├âãÆ├åÔÇÖ├âÔÇÜ├é┬ó├âãÆ├é┬ó├â┬ó├óÔé¼┼í├é┬¼├âÔÇª├é┬¥├âãÆ├óÔé¼┼í├âÔÇÜ├é┬ó├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├óÔé¼┬á├â┬ó├óÔÇÜ┬¼├óÔÇ×┬ó├âãÆ├åÔÇÖ├â┬ó├óÔÇÜ┬¼ ├âãÆ├é┬ó├â┬ó├óÔé¼┼í├é┬¼├â┬ó├óÔé¼┼¥├é┬ó├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├é┬ó├â┬ó├óÔé¼┼í├é┬¼├âÔÇª├é┬í├âãÆ├åÔÇÖ├â┬ó├óÔÇÜ┬¼├à┬í├âãÆ├óÔé¼┼í├âÔÇÜ├é┬ó├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├óÔé¼┬á├â┬ó├óÔÇÜ┬¼├óÔÇ×┬ó├âãÆ├åÔÇÖ├â┬ó├óÔÇÜ┬¼├à┬í├âãÆ├óÔé¼┼í├âÔÇÜ├é┬ó├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├óÔé¼┼í├âÔÇÜ├é┬ó├âãÆ├åÔÇÖ├âÔÇÜ├é┬ó├âãÆ├é┬ó├â┬ó├óÔé¼┼í├é┬¼├âÔÇª├é┬í├âãÆ├óÔé¼┼í├âÔÇÜ├é┬¼├âãÆ├åÔÇÖ├â┬ó├óÔÇÜ┬¼├é┬ª├âãÆ├óÔé¼┼í├âÔÇÜ├é┬í├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├é┬ó├â┬ó├óÔé¼┼í├é┬¼├âÔÇª├é┬í├âãÆ├åÔÇÖ├â┬ó├óÔÇÜ┬¼├à┬í├âãÆ├óÔé¼┼í├âÔÇÜ├é┬¼├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├óÔé¼┬á├â┬ó├óÔÇÜ┬¼├óÔÇ×┬ó├âãÆ├åÔÇÖ├âÔÇÜ├é┬ó├âãÆ├é┬ó├â┬ó├óÔÇÜ┬¼├à┬í├âÔÇÜ├é┬¼├âãÆ├óÔé¼┼í├âÔÇÜ├é┬ª├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├é┬ó├â┬ó├óÔé¼┼í├é┬¼├âÔÇª├é┬í├âãÆ├åÔÇÖ├â┬ó├óÔÇÜ┬¼├à┬í├âãÆ├óÔé¼┼í├âÔÇÜ├é┬í├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├óÔé¼┬á├â┬ó├óÔÇÜ┬¼├óÔÇ×┬ó├âãÆ├åÔÇÖ├â┬ó├óÔÇÜ┬¼ ├âãÆ├é┬ó├â┬ó├óÔé¼┼í├é┬¼├â┬ó├óÔé¼┼¥├é┬ó├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├é┬ó├â┬ó├óÔé¼┼í├é┬¼├âÔÇÜ ├âãÆ├åÔÇÖ├âÔÇÜ├é┬ó├âãÆ├é┬ó├â┬ó├óÔÇÜ┬¼├à┬í├âÔÇÜ├é┬¼├âãÆ├é┬ó├â┬ó├óÔÇÜ┬¼├à┬¥├âÔÇÜ├é┬ó├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├óÔé¼┬á├â┬ó├óÔÇÜ┬¼├óÔÇ×┬ó├âãÆ├åÔÇÖ├â┬ó├óÔÇÜ┬¼├à┬í├âãÆ├óÔé¼┼í├âÔÇÜ├é┬ó├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├óÔé¼┼í├âÔÇÜ├é┬ó├âãÆ├åÔÇÖ├âÔÇÜ├é┬ó├âãÆ├é┬ó├â┬ó├óÔÇÜ┬¼├à┬í├âÔÇÜ├é┬¼├âãÆ├óÔé¼┬ª├âÔÇÜ├é┬í├âãÆ├åÔÇÖ├â┬ó├óÔÇÜ┬¼├à┬í├âãÆ├óÔé¼┼í├âÔÇÜ├é┬¼├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├é┬ó├â┬ó├óÔé¼┼í├é┬¼├âÔÇÜ├é┬ª├âãÆ├åÔÇÖ├â┬ó├óÔÇÜ┬¼├à┬í├âãÆ├óÔé¼┼í├âÔÇÜ├é┬í├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├óÔé¼┬á├â┬ó├óÔÇÜ┬¼├óÔÇ×┬ó├âãÆ├åÔÇÖ├â┬ó├óÔÇÜ┬¼ ├âãÆ├é┬ó├â┬ó├óÔé¼┼í├é┬¼├â┬ó├óÔé¼┼¥├é┬ó├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├óÔé¼┼í├âÔÇÜ├é┬ó├âãÆ├åÔÇÖ├âÔÇÜ├é┬ó├âãÆ├é┬ó├â┬ó├óÔé¼┼í├é┬¼├âÔÇª├é┬í├âãÆ├óÔé¼┼í├âÔÇÜ├é┬¼├âãÆ├åÔÇÖ├â┬ó├óÔÇÜ┬¼├é┬ª├âãÆ├óÔé¼┼í├âÔÇÜ├é┬í├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├óÔé¼┬á├â┬ó├óÔÇÜ┬¼├óÔÇ×┬ó├âãÆ├åÔÇÖ├âÔÇÜ├é┬ó├âãÆ├é┬ó├â┬ó├óÔÇÜ┬¼├à┬í├âÔÇÜ├é┬¼├âãÆ├óÔé¼┬ª├âÔÇÜ├é┬í├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├é┬ó├â┬ó├óÔé¼┼í├é┬¼├âÔÇª├é┬í├âãÆ├åÔÇÖ├â┬ó├óÔÇÜ┬¼├à┬í├âãÆ├óÔé¼┼í├âÔÇÜ├é┬ó├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├óÔé¼┬á├â┬ó├óÔÇÜ┬¼├óÔÇ×┬ó├âãÆ├åÔÇÖ├â┬ó├óÔÇÜ┬¼ ├âãÆ├é┬ó├â┬ó├óÔé¼┼í├é┬¼├â┬ó├óÔé¼┼¥├é┬ó├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├é┬ó├â┬ó├óÔé¼┼í├é┬¼├âÔÇÜ ├âãÆ├åÔÇÖ├âÔÇÜ├é┬ó├âãÆ├é┬ó├â┬ó├óÔÇÜ┬¼├à┬í├âÔÇÜ├é┬¼├âãÆ├é┬ó├â┬ó├óÔÇÜ┬¼├à┬¥├âÔÇÜ├é┬ó├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├óÔé¼┬á├â┬ó├óÔÇÜ┬¼├óÔÇ×┬ó├âãÆ├åÔÇÖ├âÔÇÜ├é┬ó├âãÆ├é┬ó├â┬ó├óÔÇÜ┬¼├à┬í├âÔÇÜ├é┬¼├âãÆ├óÔé¼┼í├âÔÇÜ ├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├óÔé¼┼í├âÔÇÜ├é┬ó├âãÆ├åÔÇÖ├âÔÇÜ├é┬ó├âãÆ├é┬ó├â┬ó├óÔé¼┼í├é┬¼├âÔÇª├é┬í├âãÆ├óÔé¼┼í├âÔÇÜ├é┬¼├âãÆ├åÔÇÖ├âÔÇÜ├é┬ó├âãÆ├é┬ó├â┬ó├óÔé¼┼í├é┬¼├âÔÇª├é┬¥├âãÆ├óÔé¼┼í├âÔÇÜ├é┬ó├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├óÔé¼┬á├â┬ó├óÔÇÜ┬¼├óÔÇ×┬ó├âãÆ├åÔÇÖ├â┬ó├óÔÇÜ┬¼ ├âãÆ├é┬ó├â┬ó├óÔé¼┼í├é┬¼├â┬ó├óÔé¼┼¥├é┬ó├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├óÔé¼┼í├âÔÇÜ├é┬ó├âãÆ├åÔÇÖ├âÔÇÜ├é┬ó├âãÆ├é┬ó├â┬ó├óÔé¼┼í├é┬¼├âÔÇª├é┬í├âãÆ├óÔé¼┼í├âÔÇÜ├é┬¼├âãÆ├åÔÇÖ├â┬ó├óÔÇÜ┬¼├à┬í├âãÆ├óÔé¼┼í├âÔÇÜ ├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├óÔé¼┬á├â┬ó├óÔÇÜ┬¼├óÔÇ×┬ó├âãÆ├åÔÇÖ├â┬ó├óÔÇÜ┬¼├à┬í├âãÆ├óÔé¼┼í├âÔÇÜ├é┬ó├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├óÔé¼┼í├âÔÇÜ├é┬ó├âãÆ├åÔÇÖ├âÔÇÜ├é┬ó├âãÆ├é┬ó├â┬ó├óÔÇÜ┬¼├à┬í├âÔÇÜ├é┬¼├âãÆ├óÔé¼┬ª├âÔÇÜ├é┬í├âãÆ├åÔÇÖ├â┬ó├óÔÇÜ┬¼├à┬í├âãÆ├óÔé¼┼í├âÔÇÜ├é┬¼├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├óÔé¼┼í├âÔÇÜ├é┬ó├âãÆ├åÔÇÖ├âÔÇÜ├é┬ó├âãÆ├é┬ó├â┬ó├óÔÇÜ┬¼├à┬í├âÔÇÜ├é┬¼├âãÆ├óÔé¼┬ª├âÔÇÜ├é┬¥├âãÆ├åÔÇÖ├â┬ó├óÔÇÜ┬¼├à┬í├âãÆ├óÔé¼┼í├âÔÇÜ├é┬ó├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├óÔé¼┬á├â┬ó├óÔÇÜ┬¼├óÔÇ×┬ó├âãÆ├åÔÇÖ├â┬ó├óÔÇÜ┬¼ ├âãÆ├é┬ó├â┬ó├óÔé¼┼í├é┬¼├â┬ó├óÔé¼┼¥├é┬ó├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├é┬ó├â┬ó├óÔé¼┼í├é┬¼├âÔÇÜ ├âãÆ├åÔÇÖ├âÔÇÜ├é┬ó├âãÆ├é┬ó├â┬ó├óÔÇÜ┬¼├à┬í├âÔÇÜ├é┬¼├âãÆ├é┬ó├â┬ó├óÔÇÜ┬¼├à┬¥├âÔÇÜ├é┬ó├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├óÔé¼┬á├â┬ó├óÔÇÜ┬¼├óÔÇ×┬ó├âãÆ├åÔÇÖ├â┬ó├óÔÇÜ┬¼├à┬í├âãÆ├óÔé¼┼í├âÔÇÜ├é┬ó├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├óÔé¼┼í├âÔÇÜ├é┬ó├âãÆ├åÔÇÖ├âÔÇÜ├é┬ó├âãÆ├é┬ó├â┬ó├óÔÇÜ┬¼├à┬í├âÔÇÜ├é┬¼├âãÆ├óÔé¼┬ª├âÔÇÜ├é┬í├âãÆ├åÔÇÖ├â┬ó├óÔÇÜ┬¼├à┬í├âãÆ├óÔé¼┼í├âÔÇÜ├é┬¼├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├é┬ó├â┬ó├óÔé¼┼í├é┬¼├âÔÇÜ├é┬ª├âãÆ├åÔÇÖ├â┬ó├óÔÇÜ┬¼├à┬í├âãÆ├óÔé¼┼í├âÔÇÜ├é┬í├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├óÔé¼┬á├â┬ó├óÔÇÜ┬¼├óÔÇ×┬ó├âãÆ├åÔÇÖ├â┬ó├óÔÇÜ┬¼ ├âãÆ├é┬ó├â┬ó├óÔé¼┼í├é┬¼├â┬ó├óÔé¼┼¥├é┬ó├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├óÔé¼┼í├âÔÇÜ├é┬ó├âãÆ├åÔÇÖ├âÔÇÜ├é┬ó├âãÆ├é┬ó├â┬ó├óÔé¼┼í├é┬¼├âÔÇª├é┬í├âãÆ├óÔé¼┼í├âÔÇÜ├é┬¼├âãÆ├åÔÇÖ├â┬ó├óÔÇÜ┬¼├é┬ª├âãÆ├óÔé¼┼í├âÔÇÜ├é┬í├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├óÔé¼┬á├â┬ó├óÔÇÜ┬¼├óÔÇ×┬ó├âãÆ├åÔÇÖ├âÔÇÜ├é┬ó├âãÆ├é┬ó├â┬ó├óÔÇÜ┬¼├à┬í├âÔÇÜ├é┬¼├âãÆ├óÔé¼┬ª├âÔÇÜ├é┬í├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├é┬ó├â┬ó├óÔé¼┼í├é┬¼├âÔÇª├é┬í├âãÆ├åÔÇÖ├â┬ó├óÔÇÜ┬¼├à┬í├âãÆ├óÔé¼┼í├âÔÇÜ├é┬ó├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├óÔé¼┬á├â┬ó├óÔÇÜ┬¼├óÔÇ×┬ó├âãÆ├åÔÇÖ├â┬ó├óÔÇÜ┬¼ ├âãÆ├é┬ó├â┬ó├óÔé¼┼í├é┬¼├â┬ó├óÔé¼┼¥├é┬ó├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├é┬ó├â┬ó├óÔé¼┼í├é┬¼├âÔÇÜ ├âãÆ├åÔÇÖ├âÔÇÜ├é┬ó├âãÆ├é┬ó├â┬ó├óÔÇÜ┬¼├à┬í├âÔÇÜ├é┬¼├âãÆ├é┬ó├â┬ó├óÔÇÜ┬¼├à┬¥├âÔÇÜ├é┬ó├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├óÔé¼┬á├â┬ó├óÔÇÜ┬¼├óÔÇ×┬ó├âãÆ├åÔÇÖ├âÔÇÜ├é┬ó├âãÆ├é┬ó├â┬ó├óÔÇÜ┬¼├à┬í├âÔÇÜ├é┬¼├âãÆ├óÔé¼┼í├âÔÇÜ ├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├óÔé¼┼í├âÔÇÜ├é┬ó├âãÆ├åÔÇÖ├âÔÇÜ├é┬ó├âãÆ├é┬ó├â┬ó├óÔé¼┼í├é┬¼├âÔÇª├é┬í├âãÆ├óÔé¼┼í├âÔÇÜ├é┬¼├âãÆ├åÔÇÖ├âÔÇÜ├é┬ó├âãÆ├é┬ó├â┬ó├óÔé¼┼í├é┬¼├âÔÇª├é┬¥├âãÆ├óÔé¼┼í├âÔÇÜ├é┬ó├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├óÔé¼┬á├â┬ó├óÔÇÜ┬¼├óÔÇ×┬ó├âãÆ├åÔÇÖ├â┬ó├óÔÇÜ┬¼ ├âãÆ├é┬ó├â┬ó├óÔé¼┼í├é┬¼├â┬ó├óÔé¼┼¥├é┬ó├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├óÔé¼┼í├âÔÇÜ├é┬ó├âãÆ├åÔÇÖ├âÔÇÜ├é┬ó├âãÆ├é┬ó├â┬ó├óÔé¼┼í├é┬¼├âÔÇª├é┬í├âãÆ├óÔé¼┼í├âÔÇÜ├é┬¼├âãÆ├åÔÇÖ├â┬ó├óÔÇÜ┬¼├é┬ª├âãÆ├óÔé¼┼í├âÔÇÜ├é┬í├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├óÔé¼┬á├â┬ó├óÔÇÜ┬¼├óÔÇ×┬ó├âãÆ├åÔÇÖ├âÔÇÜ├é┬ó├âãÆ├é┬ó├â┬ó├óÔÇÜ┬¼├à┬í├âÔÇÜ├é┬¼├âãÆ├óÔé¼┬ª├âÔÇÜ├é┬í├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├é┬ó├â┬ó├óÔé¼┼í├é┬¼├âÔÇª├é┬í├âãÆ├åÔÇÖ├â┬ó├óÔÇÜ┬¼├à┬í├âãÆ├óÔé¼┼í├âÔÇÜ├é┬ó├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├óÔé¼┬á├â┬ó├óÔÇÜ┬¼├óÔÇ×┬ó├âãÆ├åÔÇÖ├â┬ó├óÔÇÜ┬¼ ├âãÆ├é┬ó├â┬ó├óÔé¼┼í├é┬¼├â┬ó├óÔé¼┼¥├é┬ó├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├é┬ó├â┬ó├óÔé¼┼í├é┬¼├âÔÇÜ ├âãÆ├åÔÇÖ├âÔÇÜ├é┬ó├âãÆ├é┬ó├â┬ó├óÔÇÜ┬¼├à┬í├âÔÇÜ├é┬¼├âãÆ├é┬ó├â┬ó├óÔÇÜ┬¼├à┬¥├âÔÇÜ├é┬ó├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├óÔé¼┬á├â┬ó├óÔÇÜ┬¼├óÔÇ×┬ó├âãÆ├åÔÇÖ├âÔÇÜ├é┬ó├âãÆ├é┬ó├â┬ó├óÔÇÜ┬¼├à┬í├âÔÇÜ├é┬¼├âãÆ├óÔé¼┬ª├âÔÇÜ├é┬í├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├é┬ó├â┬ó├óÔé¼┼í├é┬¼├âÔÇª├é┬í├âãÆ├åÔÇÖ├â┬ó├óÔÇÜ┬¼├à┬í├âãÆ├óÔé¼┼í├âÔÇÜ├é┬ó├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├óÔé¼┬á├â┬ó├óÔÇÜ┬¼├óÔÇ×┬ó├âãÆ├åÔÇÖ├â┬ó├óÔÇÜ┬¼ ├âãÆ├é┬ó├â┬ó├óÔé¼┼í├é┬¼├â┬ó├óÔé¼┼¥├é┬ó├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├é┬ó├â┬ó├óÔé¼┼í├é┬¼├âÔÇª├é┬í├âãÆ├åÔÇÖ├â┬ó├óÔÇÜ┬¼├à┬í├âãÆ├óÔé¼┼í├âÔÇÜ├é┬ó├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├óÔé¼┬á├â┬ó├óÔÇÜ┬¼├óÔÇ×┬ó├âãÆ├åÔÇÖ├â┬ó├óÔÇÜ┬¼├à┬í├âãÆ├óÔé¼┼í├âÔÇÜ├é┬ó├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├óÔé¼┼í├âÔÇÜ├é┬ó├âãÆ├åÔÇÖ├âÔÇÜ├é┬ó├âãÆ├é┬ó├â┬ó├óÔé¼┼í├é┬¼├âÔÇª├é┬í├âãÆ├óÔé¼┼í├âÔÇÜ├é┬¼├âãÆ├åÔÇÖ├â┬ó├óÔÇÜ┬¼├é┬ª├âãÆ├óÔé¼┼í├âÔÇÜ├é┬í├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├é┬ó├â┬ó├óÔé¼┼í├é┬¼├âÔÇª├é┬í├âãÆ├åÔÇÖ├â┬ó├óÔÇÜ┬¼├à┬í├âãÆ├óÔé¼┼í├âÔÇÜ├é┬¼├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├óÔé¼┬á├â┬ó├óÔÇÜ┬¼├óÔÇ×┬ó├âãÆ├åÔÇÖ├âÔÇÜ├é┬ó├âãÆ├é┬ó├â┬ó├óÔÇÜ┬¼├à┬í├âÔÇÜ├é┬¼├âãÆ├óÔé¼┼í├âÔÇÜ├é┬ª├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├é┬ó├â┬ó├óÔé¼┼í├é┬¼├âÔÇª├é┬í├âãÆ├åÔÇÖ├â┬ó├óÔÇÜ┬¼├à┬í├âãÆ├óÔé¼┼í├âÔÇÜ├é┬í├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├óÔé¼┬á├â┬ó├óÔÇÜ┬¼├óÔÇ×┬ó├âãÆ├åÔÇÖ├â┬ó├óÔÇÜ┬¼ ├âãÆ├é┬ó├â┬ó├óÔé¼┼í├é┬¼├â┬ó├óÔé¼┼¥├é┬ó├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├óÔé¼┼í├âÔÇÜ├é┬ó├âãÆ├åÔÇÖ├âÔÇÜ├é┬ó├âãÆ├é┬ó├â┬ó├óÔé¼┼í├é┬¼├âÔÇª├é┬í├âãÆ├óÔé¼┼í├âÔÇÜ├é┬¼├âãÆ├åÔÇÖ├â┬ó├óÔÇÜ┬¼├é┬ª├âãÆ├óÔé¼┼í├âÔÇÜ├é┬í├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├óÔé¼┬á├â┬ó├óÔÇÜ┬¼├óÔÇ×┬ó├âãÆ├åÔÇÖ├âÔÇÜ├é┬ó├âãÆ├é┬ó├â┬ó├óÔÇÜ┬¼├à┬í├âÔÇÜ├é┬¼├âãÆ├óÔé¼┬ª├âÔÇÜ├é┬í├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├é┬ó├â┬ó├óÔé¼┼í├é┬¼├âÔÇª├é┬í├âãÆ├åÔÇÖ├â┬ó├óÔÇÜ┬¼├à┬í├âãÆ├óÔé¼┼í├âÔÇÜ├é┬¼├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├óÔé¼┬á├â┬ó├óÔÇÜ┬¼├óÔÇ×┬ó├âãÆ├åÔÇÖ├â┬ó├óÔÇÜ┬¼ ├âãÆ├é┬ó├â┬ó├óÔé¼┼í├é┬¼├â┬ó├óÔé¼┼¥├é┬ó├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├é┬ó├â┬ó├óÔé¼┼í├é┬¼├âÔÇÜ ├âãÆ├åÔÇÖ├âÔÇÜ├é┬ó├âãÆ├é┬ó├â┬ó├óÔÇÜ┬¼├à┬í├âÔÇÜ├é┬¼├âãÆ├é┬ó├â┬ó├óÔÇÜ┬¼├à┬¥├âÔÇÜ├é┬ó├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├óÔé¼┬á├â┬ó├óÔÇÜ┬¼├óÔÇ×┬ó├âãÆ├åÔÇÖ├â┬ó├óÔÇÜ┬¼├à┬í├âãÆ├óÔé¼┼í├âÔÇÜ├é┬ó├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├óÔé¼┼í├âÔÇÜ├é┬ó├âãÆ├åÔÇÖ├âÔÇÜ├é┬ó├âãÆ├é┬ó├â┬ó├óÔÇÜ┬¼├à┬í├âÔÇÜ├é┬¼├âãÆ├óÔé¼┬ª├âÔÇÜ├é┬í├âãÆ├åÔÇÖ├â┬ó├óÔÇÜ┬¼├à┬í├âãÆ├óÔé¼┼í├âÔÇÜ├é┬¼├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├é┬ó├â┬ó├óÔé¼┼í├é┬¼├âÔÇª├é┬í├âãÆ├åÔÇÖ├â┬ó├óÔÇÜ┬¼├à┬í├âãÆ├óÔé¼┼í├âÔÇÜ├é┬ª├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├óÔé¼┬á├â┬ó├óÔÇÜ┬¼├óÔÇ×┬ó├âãÆ├åÔÇÖ├â┬ó├óÔÇÜ┬¼ ├âãÆ├é┬ó├â┬ó├óÔé¼┼í├é┬¼├â┬ó├óÔé¼┼¥├é┬ó├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├óÔé¼┼í├âÔÇÜ├é┬ó├âãÆ├åÔÇÖ├âÔÇÜ├é┬ó├âãÆ├é┬ó├â┬ó├óÔé¼┼í├é┬¼├âÔÇª├é┬í├âãÆ├óÔé¼┼í├âÔÇÜ├é┬¼├âãÆ├åÔÇÖ├â┬ó├óÔÇÜ┬¼├é┬ª├âãÆ├óÔé¼┼í├âÔÇÜ├é┬í├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├óÔé¼┬á├â┬ó├óÔÇÜ┬¼├óÔÇ×┬ó├âãÆ├åÔÇÖ├âÔÇÜ├é┬ó├âãÆ├é┬ó├â┬ó├óÔÇÜ┬¼├à┬í├âÔÇÜ├é┬¼├âãÆ├óÔé¼┬ª├âÔÇÜ├é┬í├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├é┬ó├â┬ó├óÔé¼┼í├é┬¼├âÔÇª├é┬í├âãÆ├åÔÇÖ├â┬ó├óÔÇÜ┬¼├à┬í├âãÆ├óÔé¼┼í├âÔÇÜ├é┬í├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├óÔé¼┬á├â┬ó├óÔÇÜ┬¼├óÔÇ×┬ó├âãÆ├åÔÇÖ├â┬ó├óÔÇÜ┬¼ ├âãÆ├é┬ó├â┬ó├óÔé¼┼í├é┬¼├â┬ó├óÔé¼┼¥├é┬ó├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├é┬ó├â┬ó├óÔé¼┼í├é┬¼├âÔÇÜ ├âãÆ├åÔÇÖ├âÔÇÜ├é┬ó├âãÆ├é┬ó├â┬ó├óÔÇÜ┬¼├à┬í├âÔÇÜ├é┬¼├âãÆ├é┬ó├â┬ó├óÔÇÜ┬¼├à┬¥├âÔÇÜ├é┬ó├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├óÔé¼┬á├â┬ó├óÔÇÜ┬¼├óÔÇ×┬ó├âãÆ├åÔÇÖ├âÔÇÜ├é┬ó├âãÆ├é┬ó├â┬ó├óÔÇÜ┬¼├à┬í├âÔÇÜ├é┬¼├âãÆ├óÔé¼┼í├âÔÇÜ ├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├óÔé¼┼í├âÔÇÜ├é┬ó├âãÆ├åÔÇÖ├âÔÇÜ├é┬ó├âãÆ├é┬ó├â┬ó├óÔé¼┼í├é┬¼├âÔÇª├é┬í├âãÆ├óÔé¼┼í├âÔÇÜ├é┬¼├âãÆ├åÔÇÖ├âÔÇÜ├é┬ó├âãÆ├é┬ó├â┬ó├óÔé¼┼í├é┬¼├âÔÇª├é┬¥├âãÆ├óÔé¼┼í├âÔÇÜ├é┬ó├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├óÔé¼┬á├â┬ó├óÔÇÜ┬¼├óÔÇ×┬ó├âãÆ├åÔÇÖ├â┬ó├óÔÇÜ┬¼ ├âãÆ├é┬ó├â┬ó├óÔé¼┼í├é┬¼├â┬ó├óÔé¼┼¥├é┬ó├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├é┬ó├â┬ó├óÔé¼┼í├é┬¼├âÔÇª├é┬í├âãÆ├åÔÇÖ├â┬ó├óÔÇÜ┬¼├à┬í├âãÆ├óÔé¼┼í├âÔÇÜ├é┬ó├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├óÔé¼┬á├â┬ó├óÔÇÜ┬¼├óÔÇ×┬ó├âãÆ├åÔÇÖ├â┬ó├óÔÇÜ┬¼├à┬í├âãÆ├óÔé¼┼í├âÔÇÜ├é┬ó├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├óÔé¼┼í├âÔÇÜ├é┬ó├âãÆ├åÔÇÖ├âÔÇÜ├é┬ó├âãÆ├é┬ó├â┬ó├óÔé¼┼í├é┬¼├âÔÇª├é┬í├âãÆ├óÔé¼┼í├âÔÇÜ├é┬¼├âãÆ├åÔÇÖ├â┬ó├óÔÇÜ┬¼├é┬ª├âãÆ├óÔé¼┼í├âÔÇÜ├é┬í├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├é┬ó├â┬ó├óÔé¼┼í├é┬¼├âÔÇª├é┬í├âãÆ├åÔÇÖ├â┬ó├óÔÇÜ┬¼├à┬í├âãÆ├óÔé¼┼í├âÔÇÜ├é┬¼├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├óÔé¼┬á├â┬ó├óÔÇÜ┬¼├óÔÇ×┬ó├âãÆ├åÔÇÖ├âÔÇÜ├é┬ó├âãÆ├é┬ó├â┬ó├óÔÇÜ┬¼├à┬í├âÔÇÜ├é┬¼├âãÆ├óÔé¼┼í├âÔÇÜ├é┬ª├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├é┬ó├â┬ó├óÔé¼┼í├é┬¼├âÔÇª├é┬í├âãÆ├åÔÇÖ├â┬ó├óÔÇÜ┬¼├à┬í├âãÆ├óÔé¼┼í├âÔÇÜ├é┬í├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├óÔé¼┬á├â┬ó├óÔÇÜ┬¼├óÔÇ×┬ó├âãÆ├åÔÇÖ├â┬ó├óÔÇÜ┬¼ ├âãÆ├é┬ó├â┬ó├óÔé¼┼í├é┬¼├â┬ó├óÔé¼┼¥├é┬ó├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├é┬ó├â┬ó├óÔé¼┼í├é┬¼├âÔÇÜ ├âãÆ├åÔÇÖ├âÔÇÜ├é┬ó├âãÆ├é┬ó├â┬ó├óÔÇÜ┬¼├à┬í├âÔÇÜ├é┬¼├âãÆ├é┬ó├â┬ó├óÔÇÜ┬¼├à┬¥├âÔÇÜ├é┬ó├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├óÔé¼┬á├â┬ó├óÔÇÜ┬¼├óÔÇ×┬ó├âãÆ├åÔÇÖ├â┬ó├óÔÇÜ┬¼├à┬í├âãÆ├óÔé¼┼í├âÔÇÜ├é┬ó├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├óÔé¼┼í├âÔÇÜ├é┬ó├âãÆ├åÔÇÖ├âÔÇÜ├é┬ó├âãÆ├é┬ó├â┬ó├óÔÇÜ┬¼├à┬í├âÔÇÜ├é┬¼├âãÆ├óÔé¼┬ª├âÔÇÜ├é┬í├âãÆ├åÔÇÖ├â┬ó├óÔÇÜ┬¼├à┬í├âãÆ├óÔé¼┼í├âÔÇÜ├é┬¼├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├é┬ó├â┬ó├óÔé¼┼í├é┬¼├âÔÇÜ├é┬ª├âãÆ├åÔÇÖ├â┬ó├óÔÇÜ┬¼├à┬í├âãÆ├óÔé¼┼í├âÔÇÜ├é┬í├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├óÔé¼┬á├â┬ó├óÔÇÜ┬¼├óÔÇ×┬ó├âãÆ├åÔÇÖ├â┬ó├óÔÇÜ┬¼ ├âãÆ├é┬ó├â┬ó├óÔé¼┼í├é┬¼├â┬ó├óÔé¼┼¥├é┬ó├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├óÔé¼┼í├âÔÇÜ├é┬ó├âãÆ├åÔÇÖ├âÔÇÜ├é┬ó├âãÆ├é┬ó├â┬ó├óÔé¼┼í├é┬¼├âÔÇª├é┬í├âãÆ├óÔé¼┼í├âÔÇÜ├é┬¼├âãÆ├åÔÇÖ├â┬ó├óÔÇÜ┬¼├é┬ª├âãÆ├óÔé¼┼í├âÔÇÜ├é┬í├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├óÔé¼┬á├â┬ó├óÔÇÜ┬¼├óÔÇ×┬ó├âãÆ├åÔÇÖ├âÔÇÜ├é┬ó├âãÆ├é┬ó├â┬ó├óÔÇÜ┬¼├à┬í├âÔÇÜ├é┬¼├âãÆ├óÔé¼┬ª├âÔÇÜ├é┬í├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├é┬ó├â┬ó├óÔé¼┼í├é┬¼├âÔÇª├é┬í├âãÆ├åÔÇÖ├â┬ó├óÔÇÜ┬¼├à┬í├âãÆ├óÔé¼┼í├âÔÇÜ├é┬¼├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├óÔé¼┬á├â┬ó├óÔÇÜ┬¼├óÔÇ×┬ó├âãÆ├åÔÇÖ├â┬ó├óÔÇÜ┬¼ ├âãÆ├é┬ó├â┬ó├óÔé¼┼í├é┬¼├â┬ó├óÔé¼┼¥├é┬ó├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├é┬ó├â┬ó├óÔé¼┼í├é┬¼├âÔÇÜ ├âãÆ├åÔÇÖ├âÔÇÜ├é┬ó├âãÆ├é┬ó├â┬ó├óÔÇÜ┬¼├à┬í├âÔÇÜ├é┬¼├âãÆ├é┬ó├â┬ó├óÔÇÜ┬¼├à┬¥├âÔÇÜ├é┬ó├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├óÔé¼┬á├â┬ó├óÔÇÜ┬¼├óÔÇ×┬ó├âãÆ├åÔÇÖ├âÔÇÜ├é┬ó├âãÆ├é┬ó├â┬ó├óÔÇÜ┬¼├à┬í├âÔÇÜ├é┬¼├âãÆ├óÔé¼┼í├âÔÇÜ ├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├óÔé¼┼í├âÔÇÜ├é┬ó├âãÆ├åÔÇÖ├âÔÇÜ├é┬ó├âãÆ├é┬ó├â┬ó├óÔé¼┼í├é┬¼├âÔÇª├é┬í├âãÆ├óÔé¼┼í├âÔÇÜ├é┬¼├âãÆ├åÔÇÖ├âÔÇÜ├é┬ó├âãÆ├é┬ó├â┬ó├óÔé¼┼í├é┬¼├âÔÇª├é┬¥├âãÆ├óÔé¼┼í├âÔÇÜ├é┬ó├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├óÔé¼┬á├â┬ó├óÔÇÜ┬¼├óÔÇ×┬ó├âãÆ├åÔÇÖ├â┬ó├óÔÇÜ┬¼ ├âãÆ├é┬ó├â┬ó├óÔé¼┼í├é┬¼├â┬ó├óÔé¼┼¥├é┬ó├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├óÔé¼┼í├âÔÇÜ├é┬ó├âãÆ├åÔÇÖ├âÔÇÜ├é┬ó├âãÆ├é┬ó├â┬ó├óÔé¼┼í├é┬¼├âÔÇª├é┬í├âãÆ├óÔé¼┼í├âÔÇÜ├é┬¼├âãÆ├åÔÇÖ├â┬ó├óÔÇÜ┬¼├à┬í├âãÆ├óÔé¼┼í├âÔÇÜ ├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├óÔé¼┬á├â┬ó├óÔÇÜ┬¼├óÔÇ×┬ó├âãÆ├åÔÇÖ├â┬ó├óÔÇÜ┬¼├à┬í├âãÆ├óÔé¼┼í├âÔÇÜ├é┬ó├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├óÔé¼┼í├âÔÇÜ├é┬ó├âãÆ├åÔÇÖ├âÔÇÜ├é┬ó├âãÆ├é┬ó├â┬ó├óÔÇÜ┬¼├à┬í├âÔÇÜ├é┬¼├âãÆ├óÔé¼┬ª├âÔÇÜ├é┬í├âãÆ├åÔÇÖ├â┬ó├óÔÇÜ┬¼├à┬í├âãÆ├óÔé¼┼í├âÔÇÜ├é┬¼├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├óÔé¼┼í├âÔÇÜ├é┬ó├âãÆ├åÔÇÖ├âÔÇÜ├é┬ó├âãÆ├é┬ó├â┬ó├óÔÇÜ┬¼├à┬í├âÔÇÜ├é┬¼├âãÆ├óÔé¼┬ª├âÔÇÜ├é┬¥├âãÆ├åÔÇÖ├â┬ó├óÔÇÜ┬¼├à┬í├âãÆ├óÔé¼┼í├âÔÇÜ├é┬ó├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├óÔé¼┬á├â┬ó├óÔÇÜ┬¼├óÔÇ×┬ó├âãÆ├åÔÇÖ├â┬ó├óÔÇÜ┬¼ ├âãÆ├é┬ó├â┬ó├óÔé¼┼í├é┬¼├â┬ó├óÔé¼┼¥├é┬ó├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├é┬ó├â┬ó├óÔé¼┼í├é┬¼├âÔÇÜ ├âãÆ├åÔÇÖ├âÔÇÜ├é┬ó├âãÆ├é┬ó├â┬ó├óÔÇÜ┬¼├à┬í├âÔÇÜ├é┬¼├âãÆ├é┬ó├â┬ó├óÔÇÜ┬¼├à┬¥├âÔÇÜ├é┬ó├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├óÔé¼┬á├â┬ó├óÔÇÜ┬¼├óÔÇ×┬ó├âãÆ├åÔÇÖ├â┬ó├óÔÇÜ┬¼├à┬í├âãÆ├óÔé¼┼í├âÔÇÜ├é┬ó├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├óÔé¼┼í├âÔÇÜ├é┬ó├âãÆ├åÔÇÖ├âÔÇÜ├é┬ó├âãÆ├é┬ó├â┬ó├óÔÇÜ┬¼├à┬í├âÔÇÜ├é┬¼├âãÆ├óÔé¼┬ª├âÔÇÜ├é┬í├âãÆ├åÔÇÖ├â┬ó├óÔÇÜ┬¼├à┬í├âãÆ├óÔé¼┼í├âÔÇÜ├é┬¼├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├é┬ó├â┬ó├óÔé¼┼í├é┬¼├âÔÇÜ├é┬ª├âãÆ├åÔÇÖ├â┬ó├óÔÇÜ┬¼├à┬í├âãÆ├óÔé¼┼í├âÔÇÜ├é┬í├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├óÔé¼┬á├â┬ó├óÔÇÜ┬¼├óÔÇ×┬ó├âãÆ├åÔÇÖ├â┬ó├óÔÇÜ┬¼ ├âãÆ├é┬ó├â┬ó├óÔé¼┼í├é┬¼├â┬ó├óÔé¼┼¥├é┬ó├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├óÔé¼┼í├âÔÇÜ├é┬ó├âãÆ├åÔÇÖ├âÔÇÜ├é┬ó├âãÆ├é┬ó├â┬ó├óÔé¼┼í├é┬¼├âÔÇª├é┬í├âãÆ├óÔé¼┼í├âÔÇÜ├é┬¼├âãÆ├åÔÇÖ├â┬ó├óÔÇÜ┬¼├é┬ª├âãÆ├óÔé¼┼í├âÔÇÜ├é┬í├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├óÔé¼┬á├â┬ó├óÔÇÜ┬¼├óÔÇ×┬ó├âãÆ├åÔÇÖ├âÔÇÜ├é┬ó├âãÆ├é┬ó├â┬ó├óÔÇÜ┬¼├à┬í├âÔÇÜ├é┬¼├âãÆ├óÔé¼┬ª├âÔÇÜ├é┬í├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├é┬ó├â┬ó├óÔé¼┼í├é┬¼├âÔÇª├é┬í├âãÆ├åÔÇÖ├â┬ó├óÔÇÜ┬¼├à┬í├âãÆ├óÔé¼┼í├âÔÇÜ├é┬ó├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├óÔé¼┬á├â┬ó├óÔÇÜ┬¼├óÔÇ×┬ó├âãÆ├åÔÇÖ├â┬ó├óÔÇÜ┬¼ ├âãÆ├é┬ó├â┬ó├óÔé¼┼í├é┬¼├â┬ó├óÔé¼┼¥├é┬ó├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├é┬ó├â┬ó├óÔé¼┼í├é┬¼├âÔÇÜ ├âãÆ├åÔÇÖ├âÔÇÜ├é┬ó├âãÆ├é┬ó├â┬ó├óÔÇÜ┬¼├à┬í├âÔÇÜ├é┬¼├âãÆ├é┬ó├â┬ó├óÔÇÜ┬¼├à┬¥├âÔÇÜ├é┬ó├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├óÔé¼┬á├â┬ó├óÔÇÜ┬¼├óÔÇ×┬ó├âãÆ├åÔÇÖ├âÔÇÜ├é┬ó├âãÆ├é┬ó├â┬ó├óÔÇÜ┬¼├à┬í├âÔÇÜ├é┬¼├âãÆ├óÔé¼┼í├âÔÇÜ ├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├óÔé¼┼í├âÔÇÜ├é┬ó├âãÆ├åÔÇÖ├âÔÇÜ├é┬ó├âãÆ├é┬ó├â┬ó├óÔé¼┼í├é┬¼├âÔÇª├é┬í├âãÆ├óÔé¼┼í├âÔÇÜ├é┬¼├âãÆ├åÔÇÖ├âÔÇÜ├é┬ó├âãÆ├é┬ó├â┬ó├óÔé¼┼í├é┬¼├âÔÇª├é┬¥├âãÆ├óÔé¼┼í├âÔÇÜ├é┬ó├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├óÔé¼┬á├â┬ó├óÔÇÜ┬¼├óÔÇ×┬ó├âãÆ├åÔÇÖ├â┬ó├óÔÇÜ┬¼ ├âãÆ├é┬ó├â┬ó├óÔé¼┼í├é┬¼├â┬ó├óÔé¼┼¥├é┬ó├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├óÔé¼┼í├âÔÇÜ├é┬ó├âãÆ├åÔÇÖ├âÔÇÜ├é┬ó├âãÆ├é┬ó├â┬ó├óÔé¼┼í├é┬¼├âÔÇª├é┬í├âãÆ├óÔé¼┼í├âÔÇÜ├é┬¼├âãÆ├åÔÇÖ├â┬ó├óÔÇÜ┬¼├é┬ª├âãÆ├óÔé¼┼í├âÔÇÜ├é┬í├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├óÔé¼┬á├â┬ó├óÔÇÜ┬¼├óÔÇ×┬ó├âãÆ├åÔÇÖ├âÔÇÜ├é┬ó├âãÆ├é┬ó├â┬ó├óÔÇÜ┬¼├à┬í├âÔÇÜ├é┬¼├âãÆ├óÔé¼┬ª├âÔÇÜ├é┬í├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├é┬ó├â┬ó├óÔé¼┼í├é┬¼├âÔÇª├é┬í├âãÆ├åÔÇÖ├â┬ó├óÔÇÜ┬¼├à┬í├âãÆ├óÔé¼┼í├âÔÇÜ├é┬ó├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├óÔé¼┬á├â┬ó├óÔÇÜ┬¼├óÔÇ×┬ó├âãÆ├åÔÇÖ├â┬ó├óÔÇÜ┬¼ ├âãÆ├é┬ó├â┬ó├óÔé¼┼í├é┬¼├â┬ó├óÔé¼┼¥├é┬ó├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├é┬ó├â┬ó├óÔé¼┼í├é┬¼├âÔÇÜ ├âãÆ├åÔÇÖ├âÔÇÜ├é┬ó├âãÆ├é┬ó├â┬ó├óÔÇÜ┬¼├à┬í├âÔÇÜ├é┬¼├âãÆ├é┬ó├â┬ó├óÔÇÜ┬¼├à┬¥├âÔÇÜ├é┬ó├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├óÔé¼┬á├â┬ó├óÔÇÜ┬¼├óÔÇ×┬ó├âãÆ├åÔÇÖ├âÔÇÜ├é┬ó├âãÆ├é┬ó├â┬ó├óÔÇÜ┬¼├à┬í├âÔÇÜ├é┬¼├âãÆ├óÔé¼┬ª├âÔÇÜ├é┬í├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├é┬ó├â┬ó├óÔé¼┼í├é┬¼├âÔÇª├é┬í├âãÆ├åÔÇÖ├â┬ó├óÔÇÜ┬¼├à┬í├âãÆ├óÔé¼┼í├âÔÇÜ├é┬ó├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├óÔé¼┬á├â┬ó├óÔÇÜ┬¼├óÔÇ×┬ó├âãÆ├åÔÇÖ├â┬ó├óÔÇÜ┬¼ ├âãÆ├é┬ó├â┬ó├óÔé¼┼í├é┬¼├â┬ó├óÔé¼┼¥├é┬ó├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├é┬ó├â┬ó├óÔé¼┼í├é┬¼├âÔÇª├é┬í├âãÆ├åÔÇÖ├â┬ó├óÔÇÜ┬¼├à┬í├âãÆ├óÔé¼┼í├âÔÇÜ├é┬ó├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├óÔé¼┬á├â┬ó├óÔÇÜ┬¼├óÔÇ×┬ó├âãÆ├åÔÇÖ├â┬ó├óÔÇÜ┬¼├à┬í├âãÆ├óÔé¼┼í├âÔÇÜ├é┬ó├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├óÔé¼┼í├âÔÇÜ├é┬ó├âãÆ├åÔÇÖ├âÔÇÜ├é┬ó├âãÆ├é┬ó├â┬ó├óÔÇÜ┬¼├à┬í├âÔÇÜ├é┬¼├âãÆ├óÔé¼┬ª├âÔÇÜ├é┬í├âãÆ├åÔÇÖ├â┬ó├óÔÇÜ┬¼├à┬í├âãÆ├óÔé¼┼í├âÔÇÜ├é┬¼├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├é┬ó├â┬ó├óÔé¼┼í├é┬¼├âÔÇÜ├é┬ª├âãÆ├åÔÇÖ├â┬ó├óÔÇÜ┬¼├à┬í├âãÆ├óÔé¼┼í├âÔÇÜ├é┬í├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├óÔé¼┬á├â┬ó├óÔÇÜ┬¼├óÔÇ×┬ó├âãÆ├åÔÇÖ├âÔÇÜ├é┬ó├âãÆ├é┬ó├â┬ó├óÔÇÜ┬¼├à┬í├âÔÇÜ├é┬¼├âãÆ├óÔé¼┬ª├âÔÇÜ├é┬í├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├é┬ó├â┬ó├óÔé¼┼í├é┬¼├âÔÇª├é┬í├âãÆ├åÔÇÖ├â┬ó├óÔÇÜ┬¼├à┬í├âãÆ├óÔé¼┼í├âÔÇÜ├é┬¼├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├óÔé¼┬á├â┬ó├óÔÇÜ┬¼├óÔÇ×┬ó├âãÆ├åÔÇÖ├â┬ó├óÔÇÜ┬¼ ├âãÆ├é┬ó├â┬ó├óÔé¼┼í├é┬¼├â┬ó├óÔé¼┼¥├é┬ó├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├óÔé¼┼í├âÔÇÜ├é┬ó├âãÆ├åÔÇÖ├âÔÇÜ├é┬ó├âãÆ├é┬ó├â┬ó├óÔé¼┼í├é┬¼├âÔÇª├é┬í├âãÆ├óÔé¼┼í├âÔÇÜ├é┬¼├âãÆ├åÔÇÖ├â┬ó├óÔÇÜ┬¼├à┬í├âãÆ├óÔé¼┼í├âÔÇÜ├é┬ª├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├óÔé¼┬á├â┬ó├óÔÇÜ┬¼├óÔÇ×┬ó├âãÆ├åÔÇÖ├âÔÇÜ├é┬ó├âãÆ├é┬ó├â┬ó├óÔÇÜ┬¼├à┬í├âÔÇÜ├é┬¼├âãÆ├óÔé¼┬ª├âÔÇÜ├é┬í├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├é┬ó├â┬ó├óÔé¼┼í├é┬¼├âÔÇª├é┬í├âãÆ├åÔÇÖ├â┬ó├óÔÇÜ┬¼├à┬í├âãÆ├óÔé¼┼í├âÔÇÜ├é┬í├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├óÔé¼┬á├â┬ó├óÔÇÜ┬¼├óÔÇ×┬ó├âãÆ├åÔÇÖ├â┬ó├óÔÇÜ┬¼ ├âãÆ├é┬ó├â┬ó├óÔé¼┼í├é┬¼├â┬ó├óÔé¼┼¥├é┬ó├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├é┬ó├â┬ó├óÔé¼┼í├é┬¼├âÔÇÜ ├âãÆ├åÔÇÖ├âÔÇÜ├é┬ó├âãÆ├é┬ó├â┬ó├óÔÇÜ┬¼├à┬í├âÔÇÜ├é┬¼├âãÆ├é┬ó├â┬ó├óÔÇÜ┬¼├à┬¥├âÔÇÜ├é┬ó├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├óÔé¼┬á├â┬ó├óÔÇÜ┬¼├óÔÇ×┬ó├âãÆ├åÔÇÖ├â┬ó├óÔÇÜ┬¼├à┬í├âãÆ├óÔé¼┼í├âÔÇÜ├é┬ó├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├óÔé¼┼í├âÔÇÜ├é┬ó├âãÆ├åÔÇÖ├âÔÇÜ├é┬ó├âãÆ├é┬ó├â┬ó├óÔÇÜ┬¼├à┬í├âÔÇÜ├é┬¼├âãÆ├óÔé¼┬ª├âÔÇÜ├é┬í├âãÆ├åÔÇÖ├â┬ó├óÔÇÜ┬¼├à┬í├âãÆ├óÔé¼┼í├âÔÇÜ├é┬¼├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├é┬ó├â┬ó├óÔé¼┼í├é┬¼├âÔÇÜ├é┬ª├âãÆ├åÔÇÖ├â┬ó├óÔÇÜ┬¼├à┬í├âãÆ├óÔé¼┼í├âÔÇÜ├é┬í├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├óÔé¼┬á├â┬ó├óÔÇÜ┬¼├óÔÇ×┬ó├âãÆ├åÔÇÖ├â┬ó├óÔÇÜ┬¼ ├âãÆ├é┬ó├â┬ó├óÔé¼┼í├é┬¼├â┬ó├óÔé¼┼¥├é┬ó├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├óÔé¼┼í├âÔÇÜ├é┬ó├âãÆ├åÔÇÖ├âÔÇÜ├é┬ó├âãÆ├é┬ó├â┬ó├óÔé¼┼í├é┬¼├âÔÇª├é┬í├âãÆ├óÔé¼┼í├âÔÇÜ├é┬¼├âãÆ├åÔÇÖ├â┬ó├óÔÇÜ┬¼├é┬ª├âãÆ├óÔé¼┼í├âÔÇÜ├é┬í├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├óÔé¼┬á├â┬ó├óÔÇÜ┬¼├óÔÇ×┬ó├âãÆ├åÔÇÖ├âÔÇÜ├é┬ó├âãÆ├é┬ó├â┬ó├óÔÇÜ┬¼├à┬í├âÔÇÜ├é┬¼├âãÆ├óÔé¼┬ª├âÔÇÜ├é┬í├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├é┬ó├â┬ó├óÔé¼┼í├é┬¼├âÔÇª├é┬í├âãÆ├åÔÇÖ├â┬ó├óÔÇÜ┬¼├à┬í├âãÆ├óÔé¼┼í├âÔÇÜ├é┬¼├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├óÔé¼┬á├â┬ó├óÔÇÜ┬¼├óÔÇ×┬ó├âãÆ├åÔÇÖ├â┬ó├óÔÇÜ┬¼ ├âãÆ├é┬ó├â┬ó├óÔé¼┼í├é┬¼├â┬ó├óÔé¼┼¥├é┬ó├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├é┬ó├â┬ó├óÔé¼┼í├é┬¼├âÔÇÜ ├âãÆ├åÔÇÖ├âÔÇÜ├é┬ó├âãÆ├é┬ó├â┬ó├óÔÇÜ┬¼├à┬í├âÔÇÜ├é┬¼├âãÆ├é┬ó├â┬ó├óÔÇÜ┬¼├à┬¥├âÔÇÜ├é┬ó├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├óÔé¼┬á├â┬ó├óÔÇÜ┬¼├óÔÇ×┬ó├âãÆ├åÔÇÖ├âÔÇÜ├é┬ó├âãÆ├é┬ó├â┬ó├óÔÇÜ┬¼├à┬í├âÔÇÜ├é┬¼├âãÆ├óÔé¼┼í├âÔÇÜ ├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├óÔé¼┼í├âÔÇÜ├é┬ó├âãÆ├åÔÇÖ├âÔÇÜ├é┬ó├âãÆ├é┬ó├â┬ó├óÔé¼┼í├é┬¼├âÔÇª├é┬í├âãÆ├óÔé¼┼í├âÔÇÜ├é┬¼├âãÆ├åÔÇÖ├âÔÇÜ├é┬ó├âãÆ├é┬ó├â┬ó├óÔé¼┼í├é┬¼├âÔÇª├é┬¥├âãÆ├óÔé¼┼í├âÔÇÜ├é┬ó├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├óÔé¼┬á├â┬ó├óÔÇÜ┬¼├óÔÇ×┬ó├âãÆ├åÔÇÖ├â┬ó├óÔÇÜ┬¼ ├âãÆ├é┬ó├â┬ó├óÔé¼┼í├é┬¼├â┬ó├óÔé¼┼¥├é┬ó├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├é┬ó├â┬ó├óÔé¼┼í├é┬¼├âÔÇª├é┬í├âãÆ├åÔÇÖ├â┬ó├óÔÇÜ┬¼├à┬í├âãÆ├óÔé¼┼í├âÔÇÜ├é┬ó├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├óÔé¼┬á├â┬ó├óÔÇÜ┬¼├óÔÇ×┬ó├âãÆ├åÔÇÖ├â┬ó├óÔÇÜ┬¼├à┬í├âãÆ├óÔé¼┼í├âÔÇÜ├é┬ó├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├óÔé¼┼í├âÔÇÜ├é┬ó├âãÆ├åÔÇÖ├âÔÇÜ├é┬ó├âãÆ├é┬ó├â┬ó├óÔé¼┼í├é┬¼├âÔÇª├é┬í├âãÆ├óÔé¼┼í├âÔÇÜ├é┬¼├âãÆ├åÔÇÖ├â┬ó├óÔÇÜ┬¼├é┬ª├âãÆ├óÔé¼┼í├âÔÇÜ├é┬í├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├é┬ó├â┬ó├óÔé¼┼í├é┬¼├âÔÇª├é┬í├âãÆ├åÔÇÖ├â┬ó├óÔÇÜ┬¼├à┬í├âãÆ├óÔé¼┼í├âÔÇÜ├é┬¼├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├óÔé¼┬á├â┬ó├óÔÇÜ┬¼├óÔÇ×┬ó├âãÆ├åÔÇÖ├âÔÇÜ├é┬ó├âãÆ├é┬ó├â┬ó├óÔÇÜ┬¼├à┬í├âÔÇÜ├é┬¼├âãÆ├óÔé¼┼í├âÔÇÜ├é┬ª├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├é┬ó├â┬ó├óÔé¼┼í├é┬¼├âÔÇª├é┬í├âãÆ├åÔÇÖ├â┬ó├óÔÇÜ┬¼├à┬í├âãÆ├óÔé¼┼í├âÔÇÜ├é┬í├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├óÔé¼┬á├â┬ó├óÔÇÜ┬¼├óÔÇ×┬ó├âãÆ├åÔÇÖ├â┬ó├óÔÇÜ┬¼ ├âãÆ├é┬ó├â┬ó├óÔé¼┼í├é┬¼├â┬ó├óÔé¼┼¥├é┬ó├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├é┬ó├â┬ó├óÔé¼┼í├é┬¼├âÔÇÜ ├âãÆ├åÔÇÖ├âÔÇÜ├é┬ó├âãÆ├é┬ó├â┬ó├óÔÇÜ┬¼├à┬í├âÔÇÜ├é┬¼├âãÆ├é┬ó├â┬ó├óÔÇÜ┬¼├à┬¥├âÔÇÜ├é┬ó├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├óÔé¼┬á├â┬ó├óÔÇÜ┬¼├óÔÇ×┬ó├âãÆ├åÔÇÖ├â┬ó├óÔÇÜ┬¼├à┬í├âãÆ├óÔé¼┼í├âÔÇÜ├é┬ó├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├óÔé¼┼í├âÔÇÜ├é┬ó├âãÆ├åÔÇÖ├âÔÇÜ├é┬ó├âãÆ├é┬ó├â┬ó├óÔÇÜ┬¼├à┬í├âÔÇÜ├é┬¼├âãÆ├óÔé¼┬ª├âÔÇÜ├é┬í├âãÆ├åÔÇÖ├â┬ó├óÔÇÜ┬¼├à┬í├âãÆ├óÔé¼┼í├âÔÇÜ├é┬¼├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├é┬ó├â┬ó├óÔé¼┼í├é┬¼├âÔÇÜ├é┬ª├âãÆ├åÔÇÖ├â┬ó├óÔÇÜ┬¼├à┬í├âãÆ├óÔé¼┼í├âÔÇÜ├é┬í├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├óÔé¼┬á├â┬ó├óÔÇÜ┬¼├óÔÇ×┬ó├âãÆ├åÔÇÖ├â┬ó├óÔÇÜ┬¼ ├âãÆ├é┬ó├â┬ó├óÔé¼┼í├é┬¼├â┬ó├óÔé¼┼¥├é┬ó├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├óÔé¼┼í├âÔÇÜ├é┬ó├âãÆ├åÔÇÖ├âÔÇÜ├é┬ó├âãÆ├é┬ó├â┬ó├óÔé¼┼í├é┬¼├âÔÇª├é┬í├âãÆ├óÔé¼┼í├âÔÇÜ├é┬¼├âãÆ├åÔÇÖ├â┬ó├óÔÇÜ┬¼├é┬ª├âãÆ├óÔé¼┼í├âÔÇÜ├é┬í├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├óÔé¼┬á├â┬ó├óÔÇÜ┬¼├óÔÇ×┬ó├âãÆ├åÔÇÖ├âÔÇÜ├é┬ó├âãÆ├é┬ó├â┬ó├óÔÇÜ┬¼├à┬í├âÔÇÜ├é┬¼├âãÆ├óÔé¼┬ª├âÔÇÜ├é┬í├âãÆ├åÔÇÖ├âÔÇá├óÔé¼Ôäó├âãÆ├é┬ó├â┬ó├óÔé¼┼í├é┬¼├âÔÇª├é┬í├âãÆ├åÔÇÖ├â┬ó├óÔÇÜ┬¼├à┬í├âãÆ├óÔé¼┼í├âÔÇÜ├é┬Ø nothing to do.")
+            return
+
+        plan = create_rebalance_plan(
+            holdings=holdings,
+            prices=prices,
+            targets=targets,
+            min_order_value=args.min_order_value,
+            side_mode=args.mode,  # both/buy/sell
+            qty_precision=qmap,
+        )
+
+        # cooldown filter
+        if args.cooldown_minutes > 0:
+            last_times = _load_last_trade_times(args.pool)
+            horizon = datetime.now(timezone.utc) - timedelta(
+                minutes=int(args.cooldown_minutes)
+            )
+            filtered = []
+            for t in plan:
+                last = last_times.get(t["symbol"])
+                if last and last > horizon:
+                    # bypass cooldown if big drift
+                    if abs(drift.get(t["symbol"], 0.0)) >= float(
+                        args.cooldown_bypass_drift_pct
+                    ):
+                        filtered.append(t)
+                else:
+                    filtered.append(t)
+            plan = filtered
+
+        # turnover cap
+        base_cap_pct = float(
+            exec_cfg.get("turnover_cap_pct", 20.0)
+        )  # default 20% per run
+        cap_pct = (
+            float(args.turnover_cap_pct)
+            if args.turnover_cap_pct is not None
+            else base_cap_pct
+        )
+        cap_reasons: list[str] = []
+        if args.turnover_adaptive:
+            cap_pct, cap_reasons = _adaptive_cap_pct(
+                cap_pct, pool=args.pool, risk_off=risk_off
+            )
+
+        rules = RiskRules(
+            turnover_cap_pct=cap_pct,
+            turnover_cap_mode=str(args.turnover_cap_mode),
+            turnover_priority=str(args.turnover_priority),
+            max_trades=int(args.max_trades) if args.max_trades is not None else None,
+        )
+        capped_plan, cap_info = enforce_caps(plan, equity=equity, rules=rules)
+
+        if args.notify and cap_reasons and webhook:
+            post_discord_embed(
+                webhook,
+                "Adaptive turnover cap",
+                f"{cap_pct:.2f}% due to {', '.join(cap_reasons)}",
+            )
+
+        # circuit breakers
+        gross_notional = float(
+            sum(
+                abs(t["qty"]) * float(prices.get(t["symbol"], 0.0) or 0.0)
+                for t in capped_plan
+            )
+        )
+        missing_prices_pct = 100.0 * (
+            sum(1 for s in symbols if float(prices.get(s, 0.0) or 0.0) <= 0.0)
+            / max(1, len(symbols))
+        )
+
+        if len(capped_plan) > int(args.max_trades_hard):
+            raise RuntimeError(
+                f"Safety abort: plan has {len(capped_plan)} trades > hard limit {args.max_trades_hard}."
+            )
+        if equity > 0 and (gross_notional / equity) * 100.0 > float(
+            args.max_notional_pct_hard
+        ):
+            raise RuntimeError(
+                f"Safety abort: gross notional {gross_notional:.2f} > {args.max_notional_pct_hard:.2f}% of equity {equity:.2f}."
+            )
+        if missing_prices_pct > float(args.missing_price_pct_hard):
+            raise RuntimeError(
+                f"Safety abort: missing/zero price coverage {missing_prices_pct:.1f}% > hard limit {args.missing_price_pct_hard:.1f}%."
+            )
+
+        # optional CoinSpot guard preview (based on buy price snapshot)
+        guard_preview = GuardPreview(False, None, None, False)
+        threshold = args.guard if args.guard is not None else args.coinspot_threshold
+        if args.preview_guards and threshold is not None:
+try:
+                ref_sym = pcfg.get("guard_symbol", "BTC").upper()
+                last_buy = fetch_buy_price(
+                    ref_sym, quote=quote
+                )  # most recent quoted buy price
+                spot_now = float(prices.get(ref_sym, 0.0) or 0.0)
+                guard_preview = GuardPreview(
+                    used_coinspot_quote=True,
+                    threshold=threshold,
+                    direction=(args.coinspot_direction or "BOTH").upper(),
+                    violated=False,
+                )
+                if last_buy > 0 and spot_now > 0:
+                    change_pct = 100.0 * (spot_now / last_buy - 1.0)
+                    dirn = guard_preview.direction
+                    if (dirn in ("UP", "BOTH") and change_pct >= threshold) or (
+                        dirn in ("DOWN", "BOTH") and -change_pct >= threshold
+                    ):
+                        guard_preview.violated = True
+            except Exception:
+                pass
+
+        # dry-run/preview
+        if args.paper:
+            # simulate
+            ledger = PaperLedger(
+                fee_bps=fee_bps, slip_bps=slip_bps, min_order_value=args.min_order_value
+            )
+    _ = simulate_exec(
+                holdings, prices, capped_plan, ledger, qty_precision=qmap
+            )
+            print("=== PAPER PREVIEW ===")
+            print(
+                json.dumps(
+                    {
+                        "equity": equity,
+                        "gross_notional": gross_notional,
+                        "cap": cap_info,
+                    },
+                    indent=2,
+                )
+            )
+            if guard_preview.used_coinspot_quote:
+                print(
+                    f"[guard] direction={guard_preview.direction} threshold={guard_preview.threshold}% -> violated={guard_preview.violated}"
+                )
+            print("Plan:")
+            for t in capped_plan:
+                print(t)
+            # no file writes in --paper unless you want to:
+            return
+
+        # live mode (CoinSpot)
+        if guard_preview.used_coinspot_quote and guard_preview.violated:
+            raise RuntimeError("Guard condition violated; aborting live placement.")
+
+        # place orders
+        result = place_plan_coinspot(
+            pool=args.pool,
+            plan=capped_plan,
+            prices=prices,
+            quote=quote,
+            order_timeout_sec=int(args.order_timeout_sec),
+            poll_interval_sec=int(args.poll_interval_sec),
+            min_order_value=args.min_order_value,
+            qty_precision=qmap,
+        )
+
+        # persist portfolio changes
+        new_holdings = result.get("new_holdings") or holdings
+        save_holdings(args.pool, new_holdings, DATA_DIR)
+
+        # append trades and update equity/pnl logs
+        now = datetime.now(timezone.utc).isoformat()
+        tlog_rows = []
+        for t in result.get("filled", []):
+            tlog_rows.append(
+                {
+                    "ts": now,
+                    "ticker": t["symbol"],
+                    "qty": t["qty"],
+                    "price": t.get("price", prices.get(t["symbol"], 0.0)),
+                    "side": "BUY" if t["qty"] > 0 else "SELL",
+                }
+            )
+        if tlog_rows:
+            append_trades(args.pool, tlog_rows, DATA_DIR)
+            update_equity_and_pnl(args.pool, DATA_DIR)
+
+        # notify
+        title = f"Rebalance executed ({args.pool})"
+        desc = f"Trades: {len(result.get('filled', []))} | Gross notional: {gross_notional:.2f} {quote}"
+        if webhook:
+            post_discord_embed(webhook, title, desc)
+        _slack(
+            title,
+            {
+                "notional": f"{gross_notional:.2f} {quote}",
+                "fills": len(result.get("filled", [])),
+            },
+        )
+
+    except Exception as e:
+        # robust error notification
+        msg = f"Run failed: {e}"
+        print(msg)
+        webhook_env = os.getenv("DISCORD_WEBHOOK", "").strip()
+        if (webhook_env or "").strip():
+try:
+                post_discord_embed((webhook or webhook_env), "Trade run failed", msg)
+            except Exception:
+                pass
+        # also Slack
+try:
+            _slack("Trade run failed", {"error": str(e)})
+        except Exception:
+            pass
+    finally:
+        run_lock.release()
+
+
+def _validate_pool_config(cfg: dict, pool: str) -> list[str]:
+    """
+    Basic sanity checks: returns list of warnings/errors (strings). Non-empty means something to fix.
+    """
+    issues: list[str] = []
+try:
+        pcfg = cfg["pools"][pool]
+        assets = pcfg.get("assets", {})
+        if not isinstance(assets, dict) or not assets:
+            issues.append("assets missing/empty")
+        else:
+            for k, v in assets.items():
+                if not isinstance(v, (int, float)) or v < 0:
+                    issues.append(f"asset weight invalid: {k} -> {v}")
+
+        # optional: categories refer only to defined assets
+        cat = pcfg.get("categories", {})
+        akeys = set(assets.keys())
+        ckeys = set()
+        for _, toks in (cat or {}).items():
+            ckeys.update([str(t).upper() for t in (toks or [])])
+        unknown = ckeys - set(k.upper() for k in akeys)
+        if unknown:
+            issues.append(
+                f"categories reference unknown assets: {sorted(list(unknown))}"
+            )
+    except Exception as e:
+        issues.append(f"config parse error: {e}")
+    return issues
+
+
+# --------------------------- CLI ---------------------------
+
+if __name__ == "__main__":
+    main()
+
+
 
